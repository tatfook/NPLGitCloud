<?npl
NPL.load("(gl)script/ide/System/Database/TableDatabase.lua");
local TableDatabase = commonlib.gettable("System.Database.TableDatabase");
local db = TableDatabase:new():connect("db/", function() end);

NPL.load("(gl)script/ide/System/Encoding/sha1.lua");
local Encoding = commonlib.gettable("System.Encoding");

math.randomseed(os.time());

local alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";

local function check_user_exist(username)
    local count;
    db.User:count({ username = username }, function(err, result) count = result; end);
    return count == 1;
end

local function create_user_in_db(username, password)
    db.User:insertOne( nil, { username = username, password = Encoding.sha1(password) }, function(err, data) end);
end

local function auth_user(username, password)
    local count;
    db.User:count({ username = username, { "password", Encoding.sha1(password) } }, function(err, result) count = result; end);
    return count == 1;
end

local function get_access_tokens_in_db(username)
    local results = {};
    db.AccessToken:find({ user = username }, function(err, rows)
        for i = 1, #rows do
            table.insert(results, rows["access_token"]);
        end
    end);
    return results;
end

local function get_random_access_token()
    local result = "";
    for i = 1, access_token_length do
        local pos = math.random(1, alphabet:len());
        result = result .. alphabet:sub(pos, pos);
    end
    return result;
end

local function check_random_access_token(access_token)
    local count;
    db.AccessToken:count({ access_token = access_token }, function(err, result) count = result; end);
    return count > 0;
end

local function get_unique_access_token()
    local token = get_random_access_token();
    while (check_access_token_exist(token)) do
        token = get_random_access_token();
    end
    return token;
end

local function create_access_token_in_db(username)
    local token = get_unique_access_token();
    db.AccessToken.insertOne(nil, { user = username, access_token = token }, function(err, data) end);
    return token;
end

function create_user_by_username_password(username, password)
    if (check_user_exist(username)) then
        return false;
    end
    create_user_in_db(username, password);
    return true;
end

function get_access_tokens_by_username_password(username, password)
    if (auth_user(username, password)) then
        return get_access_tokens_in_db(username);
    else
        return false;
    end
end

function create_access_token_by_username_password(username, password)
    if (auth_user(username, password)) then
        return create_access_token_in_db(username);
    else
        return false;
    end
end
?>

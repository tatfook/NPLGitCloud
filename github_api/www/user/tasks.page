<?npl
include_once("../db.page");

NPL.load("(gl)script/ide/System/Encoding/sha1.lua");
local Encoding = commonlib.gettable("System.Encoding");

math.randomseed(os.time());

local access_token_length = 40;
local alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";

local function check_user_exist(username)
    db.User:count({ username = username }, function(err, count) resume(err, count); end);
    local err, count = yield(true);
    log("check user: " .. tostring(count));
    return count > 0;
end

local function create_user_in_db(username, password)
    db.User:insertOne( nil, { username = username, password = Encoding.sha1(password, "hex") }, function(err, data) log("create user: " .. data.username .. " " .. data.password); end);
end

local function auth_user(username, password)
    db.User:count({ ["+username+password"] = { username, Encoding.sha1(password, "hex") } }, function(err, count) resume(err, count); end);
    local err, count = yield(true);
    log("auth user: " .. tostring(count));
    return count > 0;
end

local function get_access_tokens_in_db(username)
    local results = {};
    db.AccessToken:find({ user = username }, function(err, rows) resume(err, rows); end);
    local err, rows = yield(true);
    log("found access tokens: " .. #rows);
    for i = 1, #rows do
        table.insert(results, rows[i]["access_token"]);
    end
    return results;
end

local function get_random_access_token()
    local result = "";
    for i = 1, access_token_length do
        local pos = math.random(1, alphabet:len());
        result = result .. alphabet:sub(pos, pos);
    end
    return result;
end

local function check_access_token_exist(access_token)
    db.AccessToken:count({ access_token = access_token }, function(err, count) resume(err, count); end);
    local err, count = yield(true);
    return count > 0;
end

local function get_unique_access_token()
    local token = get_random_access_token();
    while (check_access_token_exist(token)) do
        token = get_random_access_token();
    end
    return token;
end

local function create_access_token_in_db(username)
    local token = get_unique_access_token();
    log("create token: " .. token);
    db.AccessToken:insertOne(nil, { user = username, access_token = token }, function(err, data) log("create token: " .. username .. " " .. token); end);
    return token;
end

function create_user_by_username_password(username, password)
    if (check_user_exist(username)) then
        return nil;
    end
    create_user_in_db(username, password);
    return { username = username };
end

function get_access_tokens_by_username_password(username, password)
    if (auth_user(username, password)) then
        return get_access_tokens_in_db(username);
    else
        return false;
    end
end

function create_access_token_by_username_password(username, password)
    if (auth_user(username, password)) then
        return create_access_token_in_db(username);
    else
        return false;
    end
end

function get_user_by_access_token(access_token)
    db.AccessToken:findOne({ access_token = access_token }, function(err, record) resume(err, record); end);
    local err, record = yield(true);
    if (record) then
        local result = record["user"];
        return result;
    else
        return nil;
    end
end

local function get_user_from_db(record)
    return {
        login = record["username"],
        id = record["_id"],
        type = "User",
        site_admin = false
    };
end

function get_user_by_username(username)
    db.User:findOne({ username = username}, function(err, record) resume(err, record); end);
    local err, record = yield(true);
    local result = get_user_from_db(record);
    return result;
end
?>

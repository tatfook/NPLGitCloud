<?npl
include_once("./tasks.page");
include_once("../tasks.page");
include_once("../user/tasks.page");

local function get_body_optional(body, key, default)
    local result = body[key];
    if (not result) then
        return default;
    else
        return result;
    end
end

function get_repos()
    local token, type = get_access_token_from_request(), request:get("type");
    if (not token) then
        login_failed();
    end
    local user = get_user_by_access_token(token);
    if (not user or type ~= "owner") then
        login_failed();
        return;
    end
    local repos = get_repos_by_user(user);
    response:send_json(repos);
end

function create_repo()
    local token = get_access_token_from_request();
    if (not token) then
        login_failed();
    end
    local user = get_user_by_access_token(token);
    if (not user) then
        login_failed();
        return;
    end
    local body = json_decode(request:GetBody());
    local options = {};
    options["owner"] = user;
    options["name"] = body["name"];
    options["description"] = get_body_optional(body, "description", "");
    options["homepage"] = get_body_optional(body, "homepage", "");
    options["private"] = get_body_optional(body, "private", false);
    options["has_issues"] = get_body_optional(body, "has_issues", true);
    options["has_wiki"] = get_body_optional(body, "has_wiki", true);
    options["has_downloads"] = get_body_optional(body, "has_downloads", true);
    options["auto_init"] = get_body_optional(body, "auto_init", false);
    local repo = create_repo_by_options(options);
    if (repo) then
        response:status(201):send_json(repo);
    else
        local errors = { {
            resource = user .. "/" .. body["name"],
            field = "full_name",
            code = "already_exists"
        } };
        invalid_json_fields("Repo Exists", errors);
    end
end

function delete_repo()
    local token = get_access_token_from_request();
    if (not token) then
        login_failed();
    end
    local user = get_user_by_access_token(token);
    if (not user or user ~= request:url():match("^/repos/([^/]+)/[^/]+")) then
        login_failed();
    end
    local owner, reponame = request:url():match("^/repos/([^/]+)/[^/]+"), request:url():match("^/repos/[^/]+/([^/]+)");
    if (delete_repo_by_owner_reponame(owner, reponame)) then
        request:status(204):send();
    else
        not_found();
    end
end

function get_contents()
    local token = get_access_token_from_request();
    if (not token) then
        login_failed();
    end
    local user = get_user_by_access_token(token);
    if (not user or user ~= request:url():match("^/repos/([^/]+)/[^/]+/.+")) then
        login_failed();
    end
    local fullname, path = request:url():match("^/repos/([^/]+/[^/]+)/.+"), request:url():match("^/repos/[^/]+/[^/]+/(.+)");
    local contents = get_contents_by_repo_path(fullname, path);
    if (contents) then
        request:send_json(contents);
    else
        not_found();
    end
end
?>

<?npl
include_once("./tasks.page");
include_once("../tasks.page");
include_once("../user/tasks.page");

local function get_body_optional(body, key, default)
    local result = body[key];
    if (not result) then
        return default;
    else
        return result;
    end
end

function get_repos()
    local user, type = auth_access_token(), request:get("type");
    if (not user or type ~= "owner") then
        login_failed();
        return;
    end
    local repos = get_repos_by_user(user);
    response:send_json(repos);
end

function create_repo()
    local user = auth_access_token();
    if (not user) then
        login_failed();
        return;
    end
    local body = request:GetBody();
    local options = {
        owner = user,
        name = body["name"],
        description = get_body_optional(body, "description", ""),
        homepage = get_body_optional(body, "homepage", ""),
        private = get_body_optional(body, "private", false),
        has_issues = get_body_optional(body, "has_issues", true),
        has_wiki = get_body_optional(body, "has_wiki", true),
        has_downloads = get_body_optional(body, "has_downloads", true),
        auto_init = get_body_optional(body, "auto_init", false)
    };
    local repo = create_repo_by_options(options);
    if (repo) then
        response:status(201):send_json(repo);
    else
        local errors = { {
            resource = user .. "/" .. body["name"],
            field = "full_name",
            code = "already_exists"
        } };
        invalid_json_fields("Repo Exists", errors);
    end
end

function delete_repo()
    local user = auth_access_token();
    local owner = get_url_without_params():match("^/repos/([^/]+)/[^/]+");
    if (not user or user ~= owner) then
        login_failed();
        return;
    end
    local reponame = get_url_without_params():match("^/repos/[^/]+/([^/]+)");
    if (delete_repo_by_owner_reponame(owner, reponame)) then
        response:status(204):send();
    else
        not_found();
    end
end

function get_contents()
    local user = auth_access_token();
    if (not user or user ~= get_url_without_params():match("^/repos/([^/]+)/[^/]+/contents")) then
        login_failed();
        return;
    end
    local fullname, path = get_url_without_params():match("^/repos/([^/]+/[^/]+)/contents"), get_url_without_params():match("^/repos/[^/]+/[^/]+/contents/(.*)");
    local contents = get_contents_by_repo_path(fullname, path);
    if (contents) then
        response:send_json(contents);
    else
        not_found();
    end
end

function delete_file()
    local user = auth_access_token();
    if (not user or user ~= get_url_without_params():match("^/repos/([^/]+)/[^/]+/contents")) then
        login_failed();
        return;
    end
    local fullname = get_url_without_params():match("^/repos/([^/]+/[^/]+)/contents");
    local path = process_path(get_url_without_params():match("^/repos/[^/]+/[^/]+/contents/(.*)"));
    local body = request:GetBody();
    local sha = get_body_optional(body, "sha", nil);
    local message = get_body_optional(body, "message", "");
    local options = {
        repo = fullname,
        path = path,
        commit_msg = message,
        branch_name = "master",
        origin_sha = sha
    }
    local result = delete_file_by_options(options);
    if (result == 1) then
        no_content();
    else
        delete_failed();
    end
end

function update_file()
    local user = auth_access_token();
    if (not user or user ~= get_url_without_params():match("^/repos/([^/]+)/[^/]+/contents")) then
        login_failed();
        return;
    end
    local fullname = get_url_without_params():match("^/repos/([^/]+/[^/]+)/contents");
    local path =  process_path(get_url_without_params():match("^/repos/[^/]+/[^/]+/contents/(.*)"));
    local body = request:GetBody();
    local content = get_body_optional(body, "content", nil);
    local sha = get_body_optional(body, "sha", nil);
    local message = get_body_optional(body, "message", "");
    local options = {
        repo = fullname,
        path = path,
        commit_msg = message,
        branch_name = "master",
        origin_sha = sha,
        content_length = content:len(),
        content = content
    }
    local result = update_file_by_options(options);
    if (result == 1) then
        no_content();
    else
        update_failed();
    end
end

function get_trees()
    local user = auth_access_token();
    if (not user or user ~= get_url_without_params():match("^/repos/([^/]+)/[^/]+/git/trees/master")) then
        login_failed();
        return;
    end
    local repo = get_url_without_params():match("^/repos/([^/]+/[^/]+)/git/trees/master");
    local result = get_trees_by_repo(repo);
    response:send_json(result);
end
?>

<?npl
--[[
Title: stars owned by a project
Author: LiXizhi
Date: 2016/8/7
]]
include_once("./project.page");

local project_stars = inherit(models.abstract.base, gettable("models.project_stars"));

project_stars.db_name = "project_stars";
-- we will only keep the most recent self.max_stars, however the actual star count can be millions
project_stars.max_stars = 100;
-- max text length
local max_length = 5000;

function project_stars:ctor()
	-- unique name
	self:addfield("name", "string", true, 30);
	-- commar separated string of userid that has stared this project
	-- please note, we will only keep the most recent self.max_stars
	self:addfield("stars", "string", nil);
end

-- return {name, stars=userid string}
function project_stars:get(params)
	local proj = project_stars._super.get(self, params);
	if(proj and proj.stars) then
		--local users = {};
		--for userid in proj.stars:gmatch("%d+") do
			--users[#users+1] = tonumber(userid);
		--end
		--return next(users) and users;
		return proj;
	end
end

function project_stars:create(params)
end

function project_stars:update(params)
end

function project_stars:delete(params)
end

-- protected: 
-- @return true if added;
function project_stars:addUser(project_name, user_id)
	if(not user_id or not project_name) then
		return
	end
	local proj = self:get({name=project_name});
	if(proj) then
		local stars = proj.stars;
		if(stars:match(tostring(user_id)..",")) then
			return true;
		end
		-- add to project
		if(#stars > max_length) then
			-- add to front, pop the last.
			stars = stars:gsub("[%d]+,$", "");
			stars = (tostring(user_id)..",")..stars;
		else
			stars = (tostring(user_id)..",")..stars;
		end
		local err, data = self:db():updateOne({name = project_name}, {stars = stars}, resume)
		if(data) then
			return true;
		end
	else
		local stars = (tostring(user_id)..",");
		local err, data = self:db():insertOne(nil, {name = project_name, stars = stars, }, resume);
		if(data) then
			return true;
		end
	end
end

-- protected: 
-- @return true if removed
function project_stars:removeUser(project_name, user_id)
	if(not user_id or not project_name) then
		return
	end
	local proj = self:get({name=proj_name});
	if(proj) then
		local stars = proj.stars;
		-- remove user from project
		local new_stars = stars:gsub(tostring(user_id)..",", "");
		if(new_stars ~= stars) then
			local res = project_stars._super.update(self, {name = project_name, stars = new_stars})
			if(res) then
				return true;
			end
		else
			return true;
		end
	else
		return true;
	end
end
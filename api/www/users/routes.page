<?npl
include_once("../utils.page");
include_once("../auth/routes.page");

NPL.load("(gl)script/ide/System/Database/TableDatabase.lua");

local function get_user_info_db(username)
    local TableDatabase = commonlib.gettable("System.Database.TableDatabase");
    local db = TableDatabase:new():connect("api/db/", function() end);
    local result = {};
    db.Users:findOne({username=username}, function(err, user) result = user; end);
    return result;
end

local function process_user_info(result, user_info, username)
    result["login"] = username;
    result["id"] = user_info["_id"];
    result["avatar_url"] = user_info["avatar_url"];
    result["gravatar_id"] = user_info["gravatar_id"];
    result["url"] = api_addr .. "/users/" .. username;
    result["html_url"] = web_addr .. "/"  .. username;
    result["followers_url"] = api_addr .. "/users/" .. username .. "/followers";
    result["following_url"] = api_addr .. "/users/" .. username .. "/following{/other_user}";
    result["gists_url"] = api_addr .. "/users/" .. username .. "/gists{/gist_id}";
    result["starred_url"] = api_addr .. "/users/" .. username .. "/starred{/owner}{/repo}";
    result["subscriptions_url"] = api_addr .. "/users/" .. username .. "/subscriptions";
    result["organizations_url"] = api_addr .. "/users/" .. username .. "/orgs";
    result["repos_url"] = api_addr .. "/users/" .. username .. "/repos";
    result["events_url"] = api_addr .. "/users/" .. username .. "/events{/privacy}";
    result["received_events_url"] = api_addr .. "/users/" .. username .. "/received_events";
    result["type"] = user_info["type"];
    result["site_admin"] = user_info["site_admin"];
end

local function process_public_user_info(result, user_info, username)
    result["name"] = user_info["name"];
    result["company"] = user_info["company"];
    result["blog"] = user_info["blog"];
    result["location"] = user_info["location"];
    result["email"] = user_info["email"];
    result["hireable"] = user_info["hireable"];
    result["bio"] = user_info["bio"];
    result["public_repos"] = get_public_repos_db(username);
    result["public_gists"] = get_public_gists_db(username);
    result["followers"] = get_followers_db(username);
    result["following"] = get_following_db(username);
    result["created_at"] = user_info["created_at"];
    result["updated_at"] = user_info["updated_at"];
end

local function process_auth_user_info(result, user_info, username)
    result["total_private_repos"] = get_total_private_repos_db(username);
    result["owned_private_repos"] = get_owned_private_repos_db(username);
    result["private_gists"] = get_private_gists_db(username);
    result["disk_usage"] = get_disk_usage_db(username);
    result["collaborators"] = get_collaborators_db(username);
    result["plan"] = get_user_plan_db(username);
end

local function get_basic_user_info(username, user_info)
    if (user_info == nil) then
        user_info = get_user_info_db(username);
    end
    local result = {};
    process_user_info(result, user_info, username);
    return result;
end

local function get_public_user_info(username, user_info)
    if (user_info == nil) then
        user_info = get_user_info_db(username);
    end
    local result = {};
    process_user_info(result, user_info, username);
    process_public_user_info(result, user_info, username);
    return result;
end

local function get_private_user_info(username, user_info)
    if (user_info == nil) then
        user_info = get_user_info_db(username);
    end
    local result = {};
    process_user_info(result, user_info, username);
    process_public_user_info(result, user_info, username);
    process_auth_user_info(result, user_info, username);
    return result;
end

local function current_user_url()
    local username = get_auth_user();
    local result = get_private_user_info(username);
    process_json_response(result);
end

local function user_url()
    local username = request:url():match("^[^%?]*"):match("/users/(.+)");
    local result = get_public_user_info(username);
    process_json_response(result);
end

local function process_update_body(body)
    local result = {};
    result["name"] = body["name"];
    result["email"] = body["email"];
    result["blog"] = body["blog"];
    result["company"] = body["company"];
    result["location"] = body["location"];
    result["hireable"] = body["hireable"];
    result["bio"] = body["bio"];
    return result;
end

local function update_current_user()
    if (request:IsJsonBody()) then
        not_json_response();
        return;
    end
    local username = get_auth_user();
    local body = json_decode(request:GetBody());
    if (not body) then
        invalid_json_response();
        return;
    end
    body = process_update_body(body);
    local TableDatabase = commonlib.gettable("System.Database.TableDatabase");
    local db = TableDatabase:new():connect("api/db/", function() end);
    db.User:updateOne({username=username}, body, function(err, data) end);
    process_json_response(get_private_user_info(username));
end

local function all_users()
    local since = request:get("since");
    if (not since) then
        since = 1;
    else
        since = tonumber(since);
    end
    local TableDatabase = commonlib.gettable("System.Database.TableDatabase");
    local db = TableDatabase:new():connect("api/db/", function() end);
    local db_result = {};
    db.User:find({ _id = { gt = since - 1, limit = 30 } }, function(err, rows) db_result = rows; end);
    local result = {};
    for k, v in ipairs(db_result) do
        table.insert(result, get_basic_user_info(v["username"], v));
    end
    local link = {};
    db.Users:find({ _id = { gt = db_result[#db_result]["_id"], limit = 1 } }, function(err, users) link["next"] = { api_addr .. "/users?since=" .. tostring(users[1]["_id"]), "next" }; end);
    db.Users:find({ ["-_id"] = { limit = 1 } }, function(err, users) link=["last"] = { api_addr .. "/users?since=" .. tostring(users[1]["_id"]), "last" }; end);
    db.Users:find({ ["+_id"] = { limit = 1 } }, function(err, users) link=["first"] = { api_addr .. "/users?since=" .. tostring(users[1]["_id"]), "first" }; end);
    db.Users:find({ _id = { lt = db_result[1]["_id"], limit = 1 } }, function(err, users) link["previous"] = { api_addr .. "/users?since=" .. tostring(users[1]["_id"]), "previous" }; end);
    process_json_link_response(result, link);
end

local apis = {
    {"^/user$", "GET", current_user_url},
    {"^/users/.+", "GET", user_url},
    {"^/user$", "PATCH", update_current_user},
    {"^/users$", "GET", all_users}
};

function is_users_api()
    local url = request:url():match("^[^%?]*");
    local method = request:GetMethod();
    for i = 1, 4 do
        if (url:match(apis[i][1]) == "" and method == apis[i][2]) then
            return true;
        end
    end
    return false;
end

function go_users_api()
    local url = request:url():match("^[^%?]*");
    local method = request:GetMethod();
    for i = 1, 4 do
        if (url:match(apis[i][1]) == "" and method == apis[i][2]) then
            apis[i][3]()
        end
    end
end
?>
